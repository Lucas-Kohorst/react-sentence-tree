"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDependencyTree = getDependencyTree;
exports.getConstituencyTree = getConstituencyTree;

var _corenlp = _interopRequireWildcard(require("corenlp"));

var _transform = require("./transform");

var _dfs = require("./dfs");

var _fallbackData = require("./fallbackData");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Start a CoreNLP server
 * @see https://stanfordnlp.github.io/CoreNLP/download.html
 * @see https://github.com/stanfordnlp/CoreNLP/blob/master/README.md
 * @see https://www.npmjs.com/package/corenlp
 * @run using `npm explore corenlp -- npm run corenlp:server` with corenlp installed
 * @run using `java -mx4g -cp "*" edu.stanford.nlp.pipeline.StanfordCoreNLPServer -port 9000 -timeout 15000`
 */

/**
 * Takes in a sentence and returns
 * the JSON data of the sentence's dependency tree
 * @param {String} treeData the sentence structure data
 * @param {String} language the language to parse
 */
function getDependencyTree(sentence, language) {
  return new Promise(function (resolve, reject) {
    var props = new _corenlp.Properties({
      annotators: "parse"
    });
    var pipeline = new _corenlp.Pipeline(props, language); // uses ConnectorServer by default

    var sent = new _corenlp["default"].simple.Sentence(sentence);
    pipeline.annotate(sent).then(function (sent) {
      // Adding an attribute "Name" with the POS and word to each element in the array
      // Returning the new TreeData
      var dependency = sent.governors();
      var dependencyTree = []; // Adding all of the dependency's to the initial list

      dependency.forEach(function (value) {
        var dependencyArray = [];
        var governorGloss = value.governorGloss() == "" ? "ROOT" : value.governorGloss();
        dependencyArray.push(value.dep());
        dependencyArray.push(governorGloss);
        dependencyArray.push(value.dependentGloss());
        dependencyTree.push(dependencyArray);
      });
      var treeData = (0, _dfs.dfsDependency)((0, _transform.transformDependencies)(dependencyTree));
      resolve(treeData);
    })["catch"](function (err) {
      resolve(_fallbackData.fallbackDependency);
    });
  });
}
/**
 * Takes in a sentence and returns
 * the JSON data of the sentence's dependency tree
 * @param {String} treeData the sentence structure data
 * @param {String} language the language to parse
 */


function getConstituencyTree(sentence, language) {
  return new Promise(function (resolve, reject) {
    var props = new _corenlp.Properties({
      annotators: "parse"
    });
    var pipeline = new _corenlp.Pipeline(props, language); // uses ConnectorServer by default

    var sent = new _corenlp["default"].simple.Sentence(sentence);
    pipeline.annotate(sent).then(function (sent) {
      var treeString = JSON.stringify(_corenlp["default"].util.Tree.fromSentence(sent).rootNode);
      var treeJSON = JSON.parse(treeString); // Adding an attribute "Name" with the POS and word to each element in the array
      // Returning the new TreeData

      var treeDFS = (0, _dfs.dfsConstituency)(treeJSON);
      var treeDFSString = JSON.stringify(treeDFS, null, 2);
      var treeData = JSON.parse(treeDFSString);
      resolve(treeData);
    })["catch"](function (err) {
      resolve(_fallbackData.fallbackConstituency);
    });
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,